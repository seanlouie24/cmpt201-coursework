#define _GNU_SOURCE
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_LEN 5

char *input_history[MAX_LEN];
int history_count = 0;

void add_to_history(char *input);
void remove_oldest_record(void);
void print_history(void);
char *get_input(void);

int main(int argc, char **argv) {
    (void)argc; (void)argv;

    for (;;) {
        char *input = get_input();
        add_to_history(input);

        if (strcmp(input, "print") == 0) {
            print_history();
        }
    }

    // unreachable unless you add a break condition
    for (size_t i = 0; i < MAX_LEN; ++i) {
        if (input_history[i]) {
            free(input_history[i]);
        }
    }
    return 0;
}

char *get_input(void) {
    char *buffer = NULL;
    size_t bufsize = 0;
    printf("Enter input: ");
    ssize_t len = getline(&buffer, &bufsize, stdin);
    if (len == -1) {
        exit(1);
    }
    if (len > 0 && buffer[len - 1] == '\n') {
        buffer[len - 1] = '\0';
    }
    return buffer;
}

void add_to_history(char *input) {
    if (history_count >= MAX_LEN) {
        remove_oldest_record();
    }
    input_history[history_count] = input;
    history_count++;
}

void remove_oldest_record(void) {
    if (history_count > 0) {
        free(input_history[0]);
        for (int i = 1; i < history_count; ++i) {
            input_history[i - 1] = input_history[i];
        }
        history_count--;
    }
}

void print_history(void) {
    for (int i = 0; i < history_count; ++i) {
        printf("%s\n", input_history[i]);
    }
}

